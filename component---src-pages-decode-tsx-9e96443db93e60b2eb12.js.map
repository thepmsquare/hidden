{"version":3,"file":"component---src-pages-decode-tsx-9e96443db93e60b2eb12.js","mappings":"2TAqBA,MAAMA,EAA8B,oBAAXC,OAEZC,EAAe,IAAMC,EAAAA,cAAAA,QAAAA,KAAO,mBA6VzC,UA3VmCC,IAiBjC,IAAIC,EAEJ,KAT2BC,EASLF,EAAMG,SAASC,QARhB,OAARF,KACF,uBAAwBA,GAsBjC,OAHIN,IACFS,EAAAA,EAAAA,IAAS,KAEJ,GAxBT,IAA2BH,EA4B3B,IAAII,EAMAC,EAxBFN,EAA0B,CACxBO,cAAeR,EAAMG,SAASC,MAAMK,mBAAmBD,cACvDE,kBACEV,EAAMG,SAASC,MAAMK,mBAAmBC,kBAC1CC,kBACEX,EAAMG,SAASC,MAAMK,mBAAmBE,kBAC1CC,iBAAkBC,IAAIC,gBACpBd,EAAMG,SAASC,MAAMK,mBAAmBD,gBAa5CF,EADEV,EACkBC,OAAOkB,aAAaC,QAAQ,SAE5B,KAGI,OAAtBV,EACFC,EAA0C,SAAtBD,EAA+B,OAAS,SAE5DC,EAAoBU,EAAAA,EAAOV,kBACvBX,GACFC,OAAOkB,aAAaG,QAAQ,QAASD,EAAAA,EAAOV,oBAKhD,MAAM,EAACY,EAAU,EAAEC,IAAoBC,EAAAA,EAAAA,UAASd,IAC1C,EAACe,EAAa,EAAEC,IACpBF,EAAAA,EAAAA,UAAkC,CAChCG,QAAQ,EACRC,QAAS,GACTC,SAAU,WAER,EAACjB,EAAkB,EAAEkB,IAA4BN,EAAAA,EAAAA,UACrDpB,IAEI,EAAC2B,EAAQ,EAAEC,IAAkBR,EAAAA,EAAAA,UAAS,IA+BtCS,EAAY,CAChBC,EACAC,EACAC,KAGA,IAAIC,EAAS,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BD,GAEEF,EAAUI,KAAoB,EAAfH,EAAU,GAASA,EAAU,IACzCI,SAAS,GACTC,SAAS,EAAG,KACZC,MAAM,GACU,IAAjBN,EAAU,IACZA,EAAU,GAAK,EACfA,EAAU,GAAKA,EAAU,GAAK,GAE9BA,EAAU,GAAKA,EAAU,GAAK,EAGlC,OAAOC,CAAM,EAgJf,IAAIM,GAAeC,EAAAA,EAAAA,GAAY,CAC7BC,QAAS,CACPC,KAAMxB,GAERyB,WAAY,CACVC,WAAY5B,EAAAA,EAAO6B,eAGvB,OACE/C,EAAAA,cAACgD,EAAAA,EAAa,CAACC,MAAOR,GACpBzC,EAAAA,cAAAA,OAAAA,CACEkD,UAAU,OACVC,MAAO,CACLC,gBAAiB,QAAQ1C,EAAmBG,iBAAgB,OAG9Db,EAAAA,cAACqD,EAAAA,EAAI,CAACH,UAAU,eACdlD,EAAAA,cAACsD,EAAAA,EAAU,KAAC,kBACM,IAChBtD,EAAAA,cAACsD,EAAAA,EAAU,CACTC,MAAU7C,EAAmBC,kBAAiB,KAAID,aAAkB,EAAlBA,EAAoBE,mBACtE4C,MAAM,UACNC,QAAQ,UAEP/C,EAAmBC,kBAAkB+C,OACtCxC,EAAAA,EAAOyC,oBAAoBC,IAErBlD,EAAmBC,kBAAkB6B,MACnC,EACAtB,EAAAA,EAAOyC,oBAAoBE,aAE7B,MACAnD,EAAmBC,kBAAkB6B,OAClCtB,EAAAA,EAAOyC,oBAAoBE,aAC7B,IACCnD,EAAmBE,kBACpBF,EAAmBC,kBAAiB,IAAID,EAAmBE,oBAGtEZ,EAAAA,cAAAA,OAAAA,CAAMkD,UAAU,OAAOY,SA3GNC,UACvBC,EAAEC,iBACF,IACE,MAAMC,EAAQ,IAAIC,MAClBD,EAAME,IAAM1D,EAAmBG,iBAC/B,MAAMwD,EAASC,SAASC,cAAc,UACtCF,EAAOG,MAAQN,EAAMM,MACrBH,EAAOI,OAASP,EAAMO,OACtB,MAAMC,EAAML,EAAOM,WAAW,KAAM,CAAEC,WAAY,SAClD,GAAY,OAARF,EACF,MAAMG,MAAM,qBAEdH,EAAII,UAAUZ,EAAO,EAAG,GAGxB,IAIIa,EAJAC,EAxFe/C,KACrB,MAAM+C,EAAa,GACnB,IAAI9C,EAA8B,CAAC,EAAG,GACtC,OAAa,CACX,IAAI+C,EAAalD,EAAU,EAAGE,EAAWC,GAEzC,GAA6B,MAAzB+C,EAAWC,OAAO,GACpBF,EAAWG,KAAKF,EAAalD,EAAU,EAAGE,EAAWC,QAChD,CACL,GAAI+C,IAAe/D,EAAAA,EAAOkE,qBACxB,MAIA,GAFAH,GAAclD,EAAU,EAAGE,EAAWC,GAEH,QAA/B+C,EAAWI,UAAU,EAAG,GAAc,CACxC,IAAIC,EACFL,EAAWI,UAAU,GAAKtD,EAAU,EAAGE,EAAWC,GACpD,GAA2C,OAAvCH,EAAU,EAAGE,EAAWC,GAC1B,MAAM,IAAI2C,MACR,2DAGJS,GAAcvD,EAAU,EAAGE,EAAWC,GACtC8C,EAAWG,KAAKG,EAClB,MAAO,GAAmB,SAAfL,EAAuB,CAChC,IAAIK,EAAavD,EAAU,EAAGE,EAAWC,GACzC,GAA2C,OAAvCH,EAAU,EAAGE,EAAWC,GAC1B,MAAM,IAAI2C,MACR,2DAIJ,GADAS,GAAcvD,EAAU,EAAGE,EAAWC,GACK,OAAvCH,EAAU,EAAGE,EAAWC,GAC1B,MAAM,IAAI2C,MACR,2DAGJS,GAAcvD,EAAU,EAAGE,EAAWC,GACtC8C,EAAWG,KAAKG,EAClB,KAAO,IAAmC,UAA/BL,EAAWI,UAAU,EAAG,GAuBjC,MAAM,IAAIR,MACR,2DAxB+C,CACjD,IAAIS,EACFL,EAAWI,UAAU,GAAKtD,EAAU,EAAGE,EAAWC,GACpD,GAA2C,OAAvCH,EAAU,EAAGE,EAAWC,GAC1B,MAAM,IAAI2C,MACR,2DAIJ,GADAS,GAAcvD,EAAU,EAAGE,EAAWC,GACK,OAAvCH,EAAU,EAAGE,EAAWC,GAC1B,MAAM,IAAI2C,MACR,2DAIJ,GADAS,GAAcvD,EAAU,EAAGE,EAAWC,GACK,OAAvCH,EAAU,EAAGE,EAAWC,GAC1B,MAAM,IAAI2C,MACR,2DAGJS,GAAcvD,EAAU,EAAGE,EAAWC,GACtC8C,EAAWG,KAAKG,EAClB,CAIA,CAEJ,CACF,CAEA,OAAON,CAAU,EAkBEO,CADCb,EAAIc,aAAa,EAAG,EAAGnB,EAAOG,MAAOH,EAAOI,SAE1DgB,EAAgBT,EACjBU,KAAKC,GAAMC,OAAOC,aAAaC,SAASH,EAAG,MAC3CI,KAAK,IAER,GAAIlE,EAAU,CACZ,IAEEkD,EADYiB,IAAAA,IAAaC,QAAQR,EAAe5D,GAC3BS,SAAS0D,IAAAA,IAAaE,KAC7C,CAAE,MAAOC,GACP,MAAM,IAAItB,MAAM,kBAClB,CACA,GAAqB,KAAjBE,EACF,MAAM,IAAIF,MAAM,kBAEpB,MAEE,GADAE,EAAeU,EACM,KAAjBV,EACF,MAAM,IAAIF,MACR,iEAIAvE,EAAAA,EAAAA,IAAS,iBAAkB,CAC/BD,MAAO,CACLK,mBAAoB,CAClBD,cAAeC,EAAmBD,cAClCE,kBAAmBD,EAAmBC,kBACtCC,kBAAmBF,EAAmBE,mBAExCmE,iBAGN,CAAE,MAAOoB,GACP3E,EAAoB,CAClBC,QAAQ,EACRC,QAASyE,EAAMzE,QACfC,SAAU,SAEd,IAsDQ3B,EAAAA,cAACoG,EAAAA,EAAa,CACZC,MAAOxE,EACPyE,SAAWtC,GAAMlC,EAAekC,EAAEuC,OAAOF,OACzCG,OAAQ,CAAEC,WAAW,GACrBC,gBAAgB,kBAChBjD,QAAQ,WACRkD,MAAM,sBAER3G,EAAAA,cAAC4G,EAAAA,EAAM,CACLC,KAAK,SACLrD,MAAM,UACNC,QAAQ,YACRqD,KAAK,SACN,WAKH9G,EAAAA,cAAC4G,EAAAA,EAAM,CACLG,QArPU,KAClB,IAAIC,EAAW1C,SAASC,cAAc,SACtCyC,EAASC,aAAa,OAAQ,QAC9BD,EAASC,aAAa,SAAU,aAChCD,EAASE,iBAAiB,UAAWlD,KACnCmD,EAAAA,EAAAA,GACEnD,GACA,CAACvD,EAAeE,EAAmBC,KACjCgB,EAAyB,CACvBnB,eAAe2G,EAAAA,EAAAA,GAAc3G,GAC7BE,oBACAC,oBACAC,iBAAkBJ,GAClB,GAEJe,EACD,IAEHwF,EAASK,OAAO,EAoOR5D,QAAQ,WACR6D,UAAWtH,EAAAA,cAACuH,EAAAA,EAAS,OACtB,yBAGDvH,EAAAA,cAACwH,EAAAA,EAAW,CACVpG,WAAYA,EACZqG,uBApQsBC,IAC9BrG,EAAiBqG,GACb7H,GACFC,OAAOkB,aAAaG,QAAQ,QAASuG,EACvC,IAkQM1H,EAAAA,cAAC4G,EAAAA,EAAM,CACLG,QAlFchD,gBAChBzD,EAAAA,EAAAA,IAAS,UAAW,CACxBD,MAAO,CACLK,mBAAoB,CAClBD,cAAeC,EAAmBD,cAClCE,kBAAmBD,EAAmBC,kBACtCC,kBAAmBF,EAAmBE,qBAG1C,EA0EM6C,QAAQ,WACRqD,KAAK,QACLQ,UAAWtH,EAAAA,cAAC2H,EAAAA,EAAa,OAC1B,YAIH3H,EAAAA,cAAC4H,EAAAA,EAAc,CACbrG,cAAeA,EACfC,oBAAqBA,KAGX,C","sources":["webpack://hidden/./src/pages/decode.tsx"],"sourcesContent":["import React, { FC, FormEvent, useState } from \"react\";\r\nimport { navigate, type HeadFC, type PageProps } from \"gatsby\";\r\nimport { Button, Typography, Card } from \"@mui/material\";\r\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport config from \"../../config\";\r\nimport ThemeToggle from \"../components/ThemeToggle\";\r\nimport CustomSnackbar from \"../components/CustomSnackbar\";\r\nimport type CustomSnackbarStateType from \"../types/CustomSnackbarStateType\";\r\nimport \"../stylesheets/decode.css\";\r\nimport \"../stylesheets/common.css\";\r\nimport getSelectedImage from \"../utils/getSelectedImage\";\r\nimport \"@fontsource/roboto/300.css\";\r\nimport \"@fontsource/roboto/400.css\";\r\nimport \"@fontsource/roboto/500.css\";\r\nimport \"@fontsource/roboto/700.css\";\r\nimport ImageIcon from \"@mui/icons-material/Image\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport PasswordInput from \"../components/PasswordInput\";\r\nimport dataURLToBlob from \"../utils/dataURLToBlob\";\r\n\r\nconst isBrowser = typeof window !== \"undefined\";\r\n\r\nexport const Head: HeadFC = () => <title>decode | hidden</title>;\r\n\r\nconst DecodePage: FC<PageProps> = (props) => {\r\n  // get state from props\r\n  interface CustomStateType {\r\n    selectedImageState: {\r\n      selectedImage: Blob;\r\n      selectedImageName: string;\r\n      selectedImageType: string;\r\n    };\r\n    [key: string]: any;\r\n  }\r\n  function isCustomStateType(obj: any): obj is CustomStateType {\r\n    if (obj && obj !== null) {\r\n      return \"selectedImageState\" in obj;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  let selectedImageStateProps;\r\n\r\n  if (isCustomStateType(props.location.state)) {\r\n    selectedImageStateProps = {\r\n      selectedImage: props.location.state.selectedImageState.selectedImage,\r\n      selectedImageName:\r\n        props.location.state.selectedImageState.selectedImageName,\r\n      selectedImageType:\r\n        props.location.state.selectedImageState.selectedImageType,\r\n      selectedImageURL: URL.createObjectURL(\r\n        props.location.state.selectedImageState.selectedImage\r\n      ),\r\n    };\r\n  } else {\r\n    if (isBrowser) {\r\n      navigate(\"/\");\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  // get stuff from local storage\r\n  let localStorageTheme;\r\n  if (isBrowser) {\r\n    localStorageTheme = window.localStorage.getItem(\"theme\");\r\n  } else {\r\n    localStorageTheme = null;\r\n  }\r\n  let defaultThemeState: \"dark\" | \"light\";\r\n  if (localStorageTheme !== null) {\r\n    defaultThemeState = localStorageTheme === \"dark\" ? \"dark\" : \"light\";\r\n  } else {\r\n    defaultThemeState = config.defaultThemeState;\r\n    if (isBrowser) {\r\n      window.localStorage.setItem(\"theme\", config.defaultThemeState);\r\n    }\r\n  }\r\n\r\n  // state\r\n  const [themeState, changeThemeState] = useState(defaultThemeState);\r\n  const [snackbarState, changeSnackbarState] =\r\n    useState<CustomSnackbarStateType>({\r\n      isOpen: false,\r\n      message: \"\",\r\n      severity: \"error\",\r\n    });\r\n  const [selectedImageState, changeSelectedImageState] = useState(\r\n    selectedImageStateProps\r\n  );\r\n  const [password, changePassword] = useState(\"\");\r\n\r\n  // custom functions\r\n  const customChangeThemeState = (newThemeState: \"dark\" | \"light\") => {\r\n    changeThemeState(newThemeState);\r\n    if (isBrowser) {\r\n      window.localStorage.setItem(\"theme\", newThemeState);\r\n    }\r\n  };\r\n\r\n  const uploadPhoto = () => {\r\n    let inputDOM = document.createElement(\"input\");\r\n    inputDOM.setAttribute(\"type\", \"file\");\r\n    inputDOM.setAttribute(\"accept\", \"image/png\");\r\n    inputDOM.addEventListener(\"change\", (e) => {\r\n      getSelectedImage(\r\n        e,\r\n        (selectedImage, selectedImageName, selectedImageType) => {\r\n          changeSelectedImageState({\r\n            selectedImage: dataURLToBlob(selectedImage),\r\n            selectedImageName,\r\n            selectedImageType,\r\n            selectedImageURL: selectedImage,\r\n          });\r\n        },\r\n        changeSnackbarState\r\n      );\r\n    });\r\n    inputDOM.click();\r\n  };\r\n\r\n  const get2nBits = (\r\n    number: number,\r\n    imageData: ImageData,\r\n    pixelData: [number, number]\r\n  ) => {\r\n    // pixelData = [pixelNumber, channel]\r\n    let result = \"\";\r\n    for (let i = 0; i < number; i++) {\r\n      result =\r\n        result +\r\n        imageData.data[pixelData[0] * 4 + pixelData[1]]\r\n          .toString(2)\r\n          .padStart(8, \"0\")\r\n          .slice(6);\r\n      if (pixelData[1] === 2) {\r\n        pixelData[1] = 0;\r\n        pixelData[0] = pixelData[0] + 1;\r\n      } else {\r\n        pixelData[1] = pixelData[1] + 1;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const getBinaryData = (imageData: ImageData) => {\r\n    const binaryData = [];\r\n    let pixelData: [number, number] = [0, 0];\r\n    while (true) {\r\n      let currentChr = get2nBits(1, imageData, pixelData); // Use the get2nBits function defined earlier.\r\n\r\n      if (currentChr.charAt(0) === \"0\") {\r\n        binaryData.push(currentChr + get2nBits(3, imageData, pixelData)); // Append 3 more bits.\r\n      } else {\r\n        if (currentChr === config.messageAppendedAtEnd) {\r\n          break; // End marker found, exit the loop.\r\n        } else {\r\n          currentChr += get2nBits(1, imageData, pixelData);\r\n\r\n          if (currentChr.substring(0, 3) === \"110\") {\r\n            let appendThis =\r\n              currentChr.substring(3) + get2nBits(2, imageData, pixelData);\r\n            if (get2nBits(1, imageData, pixelData) !== \"10\") {\r\n              throw new Error(\r\n                \"Input image doesn't appear to have any encoded message.\"\r\n              );\r\n            }\r\n            appendThis += get2nBits(3, imageData, pixelData);\r\n            binaryData.push(appendThis);\r\n          } else if (currentChr === \"1110\") {\r\n            let appendThis = get2nBits(2, imageData, pixelData);\r\n            if (get2nBits(1, imageData, pixelData) !== \"10\") {\r\n              throw new Error(\r\n                \"Input image doesn't appear to have any encoded message.\"\r\n              );\r\n            }\r\n            appendThis += get2nBits(3, imageData, pixelData);\r\n            if (get2nBits(1, imageData, pixelData) !== \"10\") {\r\n              throw new Error(\r\n                \"Input image doesn't appear to have any encoded message.\"\r\n              );\r\n            }\r\n            appendThis += get2nBits(3, imageData, pixelData);\r\n            binaryData.push(appendThis);\r\n          } else if (currentChr.substring(0, 5) === \"11110\") {\r\n            let appendThis =\r\n              currentChr.substring(5) + get2nBits(1, imageData, pixelData);\r\n            if (get2nBits(1, imageData, pixelData) !== \"10\") {\r\n              throw new Error(\r\n                \"Input image doesn't appear to have any encoded message.\"\r\n              );\r\n            }\r\n            appendThis += get2nBits(3, imageData, pixelData);\r\n            if (get2nBits(1, imageData, pixelData) !== \"10\") {\r\n              throw new Error(\r\n                \"Input image doesn't appear to have any encoded message.\"\r\n              );\r\n            }\r\n            appendThis += get2nBits(3, imageData, pixelData);\r\n            if (get2nBits(1, imageData, pixelData) !== \"10\") {\r\n              throw new Error(\r\n                \"Input image doesn't appear to have any encoded message.\"\r\n              );\r\n            }\r\n            appendThis += get2nBits(3, imageData, pixelData);\r\n            binaryData.push(appendThis);\r\n          } else {\r\n            throw new Error(\r\n              \"Input image doesn't appear to have any encoded message.\"\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return binaryData;\r\n  };\r\n\r\n  const handleFormSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      const image = new Image();\r\n      image.src = selectedImageState.selectedImageURL;\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = image.width;\r\n      canvas.height = image.height;\r\n      const ctx = canvas.getContext(\"2d\", { colorSpace: \"srgb\" });\r\n      if (ctx === null) {\r\n        throw Error(\"unexpected error.\");\r\n      }\r\n      ctx.drawImage(image, 0, 0);\r\n\r\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n      let binaryData = getBinaryData(imageData);\r\n      let decodedString = binaryData\r\n        .map((x) => String.fromCharCode(parseInt(x, 2)))\r\n        .join(\"\");\r\n      let finalMessage;\r\n      if (password) {\r\n        try {\r\n          let bytes = CryptoJS.AES.decrypt(decodedString, password);\r\n          finalMessage = bytes.toString(CryptoJS.enc.Utf8);\r\n        } catch (error) {\r\n          throw new Error(\"Wrong Password.\");\r\n        }\r\n        if (finalMessage === \"\") {\r\n          throw new Error(\"Wrong Password.\");\r\n        }\r\n      } else {\r\n        finalMessage = decodedString;\r\n        if (finalMessage === \"\") {\r\n          throw new Error(\r\n            \"Input image doesn't appear to have any encoded message.\"\r\n          );\r\n        }\r\n      }\r\n      await navigate(\"/decode_share/\", {\r\n        state: {\r\n          selectedImageState: {\r\n            selectedImage: selectedImageState.selectedImage,\r\n            selectedImageName: selectedImageState.selectedImageName,\r\n            selectedImageType: selectedImageState.selectedImageType,\r\n          },\r\n          finalMessage,\r\n        },\r\n      });\r\n    } catch (error: any) {\r\n      changeSnackbarState({\r\n        isOpen: true,\r\n        message: error.message,\r\n        severity: \"error\",\r\n      });\r\n    }\r\n  };\r\n  const navigateToStep2 = async () => {\r\n    await navigate(\"/step2/\", {\r\n      state: {\r\n        selectedImageState: {\r\n          selectedImage: selectedImageState.selectedImage,\r\n          selectedImageName: selectedImageState.selectedImageName,\r\n          selectedImageType: selectedImageState.selectedImageType,\r\n        },\r\n      },\r\n    });\r\n  };\r\n  // misc\r\n  let currentTheme = createTheme({\r\n    palette: {\r\n      mode: themeState,\r\n    },\r\n    typography: {\r\n      fontFamily: config.defaultFont,\r\n    },\r\n  });\r\n  return (\r\n    <ThemeProvider theme={currentTheme}>\r\n      <main\r\n        className=\"main\"\r\n        style={{\r\n          backgroundImage: `url(\"${selectedImageState.selectedImageURL}\")`,\r\n        }}\r\n      >\r\n        <Card className=\"inside-main\">\r\n          <Typography>\r\n            selected image:{\" \"}\r\n            <Typography\r\n              title={`${selectedImageState.selectedImageName}.${selectedImageState?.selectedImageType}`}\r\n              color=\"primary\"\r\n              variant=\"button\"\r\n            >\r\n              {selectedImageState.selectedImageName.length >\r\n              config.step2FileNameLength.max\r\n                ? `${\r\n                    selectedImageState.selectedImageName.slice(\r\n                      0,\r\n                      config.step2FileNameLength.visibleEnds\r\n                    ) +\r\n                    \"...\" +\r\n                    selectedImageState.selectedImageName.slice(\r\n                      -config.step2FileNameLength.visibleEnds\r\n                    )\r\n                  }.${selectedImageState.selectedImageType}`\r\n                : `${selectedImageState.selectedImageName}.${selectedImageState.selectedImageType}`}\r\n            </Typography>\r\n          </Typography>\r\n          <form className=\"form\" onSubmit={handleFormSubmit}>\r\n            <PasswordInput\r\n              value={password}\r\n              onChange={(e) => changePassword(e.target.value)}\r\n              others={{ autoFocus: true }}\r\n              uniqueIdForARIA=\"decode-password\"\r\n              variant=\"outlined\"\r\n              label=\"optional password\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n            >\r\n              submit\r\n            </Button>\r\n          </form>\r\n\r\n          <Button\r\n            onClick={uploadPhoto}\r\n            variant=\"outlined\"\r\n            startIcon={<ImageIcon />}\r\n          >\r\n            change selected image\r\n          </Button>\r\n          <ThemeToggle\r\n            themeState={themeState}\r\n            customChangeThemeState={customChangeThemeState}\r\n          />\r\n          <Button\r\n            onClick={navigateToStep2}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            startIcon={<ArrowBackIcon />}\r\n          >\r\n            go back\r\n          </Button>\r\n        </Card>\r\n        <CustomSnackbar\r\n          snackbarState={snackbarState}\r\n          changeSnackbarState={changeSnackbarState}\r\n        />\r\n      </main>\r\n    </ThemeProvider>\r\n  );\r\n};\r\nexport default DecodePage;\r\n"],"names":["isBrowser","window","Head","React","props","selectedImageStateProps","obj","location","state","navigate","localStorageTheme","defaultThemeState","selectedImage","selectedImageState","selectedImageName","selectedImageType","selectedImageURL","URL","createObjectURL","localStorage","getItem","config","setItem","themeState","changeThemeState","useState","snackbarState","changeSnackbarState","isOpen","message","severity","changeSelectedImageState","password","changePassword","get2nBits","number","imageData","pixelData","result","i","data","toString","padStart","slice","currentTheme","createTheme","palette","mode","typography","fontFamily","defaultFont","ThemeProvider","theme","className","style","backgroundImage","Card","Typography","title","color","variant","length","step2FileNameLength","max","visibleEnds","onSubmit","async","e","preventDefault","image","Image","src","canvas","document","createElement","width","height","ctx","getContext","colorSpace","Error","drawImage","finalMessage","binaryData","currentChr","charAt","push","messageAppendedAtEnd","substring","appendThis","getBinaryData","getImageData","decodedString","map","x","String","fromCharCode","parseInt","join","CryptoJS","decrypt","Utf8","error","PasswordInput","value","onChange","target","others","autoFocus","uniqueIdForARIA","label","Button","type","size","onClick","inputDOM","setAttribute","addEventListener","getSelectedImage","dataURLToBlob","click","startIcon","ImageIcon","ThemeToggle","customChangeThemeState","newThemeState","ArrowBackIcon","CustomSnackbar"],"sourceRoot":""}