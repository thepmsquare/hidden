{"version":3,"file":"component---src-pages-encode-tsx-bd12419f3fad894ba411.js","mappings":"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","sources":["webpack://hidden/./src/pages/encode.tsx"],"sourcesContent":["import React, { FC, FormEvent, useState } from \"react\";\r\nimport { navigate, type HeadFC, type PageProps } from \"gatsby\";\r\nimport { Button, Typography, TextField, Card } from \"@mui/material\";\r\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport config from \"../../config\";\r\nimport ThemeToggle from \"../components/ThemeToggle\";\r\nimport CustomSnackbar from \"../components/CustomSnackbar\";\r\nimport type CustomSnackbarStateType from \"../types/CustomSnackbarStateType\";\r\nimport \"../stylesheets/encode.css\";\r\nimport \"../stylesheets/common.css\";\r\nimport getSelectedImage from \"../utils/getSelectedImage\";\r\nimport dataURLToBlob from \"../utils/dataURLToBlob\";\r\nimport \"@fontsource/roboto/300.css\";\r\nimport \"@fontsource/roboto/400.css\";\r\nimport \"@fontsource/roboto/500.css\";\r\nimport \"@fontsource/roboto/700.css\";\r\nimport ImageIcon from \"@mui/icons-material/Image\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport PasswordInput from \"../components/PasswordInput\";\r\n\r\nconst isBrowser = typeof window !== \"undefined\";\r\n\r\nexport const Head: HeadFC = () => <title>encode | hidden</title>;\r\n\r\nconst EncodePage: FC<PageProps> = (props) => {\r\n  // get state from props\r\n  interface CustomStateType {\r\n    selectedImageState: {\r\n      selectedImage: Blob;\r\n      selectedImageName: string;\r\n      selectedImageType: string;\r\n    };\r\n    [key: string]: any;\r\n  }\r\n  function isCustomStateType(obj: any): obj is CustomStateType {\r\n    if (obj && obj !== null) {\r\n      return \"selectedImageState\" in obj;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  let selectedImageStateProps;\r\n  if (isCustomStateType(props.location.state)) {\r\n    selectedImageStateProps = {\r\n      selectedImage: props.location.state.selectedImageState.selectedImage,\r\n      selectedImageName:\r\n        props.location.state.selectedImageState.selectedImageName,\r\n      selectedImageType:\r\n        props.location.state.selectedImageState.selectedImageType,\r\n      selectedImageURL: URL.createObjectURL(\r\n        props.location.state.selectedImageState.selectedImage\r\n      ),\r\n    };\r\n  } else {\r\n    if (isBrowser) {\r\n      navigate(\"/\");\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  // get stuff from local storage\r\n  let localStorageTheme;\r\n  if (isBrowser) {\r\n    localStorageTheme = window.localStorage.getItem(\"theme\");\r\n  } else {\r\n    localStorageTheme = null;\r\n  }\r\n  let defaultThemeState: \"dark\" | \"light\";\r\n  if (localStorageTheme !== null) {\r\n    defaultThemeState = localStorageTheme === \"dark\" ? \"dark\" : \"light\";\r\n  } else {\r\n    defaultThemeState = config.defaultThemeState;\r\n    if (isBrowser) {\r\n      window.localStorage.setItem(\"theme\", config.defaultThemeState);\r\n    }\r\n  }\r\n\r\n  // state\r\n  const [themeState, changeThemeState] = useState(defaultThemeState);\r\n  const [snackbarState, changeSnackbarState] =\r\n    useState<CustomSnackbarStateType>({\r\n      isOpen: false,\r\n      message: \"\",\r\n      severity: \"error\",\r\n    });\r\n  const [selectedImageState, changeSelectedImageState] = useState(\r\n    selectedImageStateProps\r\n  );\r\n  const [message, changeMessage] = useState(\"\");\r\n  const [password, changePassword] = useState(\"\");\r\n\r\n  // functions\r\n  const customChangeThemeState = (newThemeState: \"dark\" | \"light\") => {\r\n    changeThemeState(newThemeState);\r\n    if (isBrowser) {\r\n      window.localStorage.setItem(\"theme\", newThemeState);\r\n    }\r\n  };\r\n\r\n  const uploadPhoto = () => {\r\n    let inputDOM = document.createElement(\"input\");\r\n    inputDOM.setAttribute(\"type\", \"file\");\r\n    inputDOM.setAttribute(\"accept\", \"image/png,image/jpeg,image/webp\");\r\n    inputDOM.addEventListener(\"change\", (e) => {\r\n      getSelectedImage(\r\n        e,\r\n        (selectedImage, selectedImageName, selectedImageType) => {\r\n          changeSelectedImageState({\r\n            selectedImage: dataURLToBlob(selectedImage),\r\n            selectedImageName,\r\n            selectedImageType,\r\n            selectedImageURL: selectedImage,\r\n          });\r\n        },\r\n        changeSnackbarState\r\n      );\r\n    });\r\n    inputDOM.click();\r\n  };\r\n\r\n  const convertMessageToBinary = (message: string) => {\r\n    let encodedMessage = \"\";\r\n    let utf8Style = \"\";\r\n    try {\r\n      for (let i = 0; i < message.length; i++) {\r\n        const unicodeNumber = message.charCodeAt(i);\r\n        let unicodeNumberInBinary = unicodeNumber.toString(2);\r\n        utf8Style = \"\";\r\n        if (unicodeNumber < 128) {\r\n          utf8Style = unicodeNumberInBinary.padStart(8, \"0\");\r\n        } else if (unicodeNumber < 2048) {\r\n          unicodeNumberInBinary = unicodeNumberInBinary.padStart(11, \"0\");\r\n          utf8Style =\r\n            \"110\" +\r\n            unicodeNumberInBinary.slice(0, 5) +\r\n            \"10\" +\r\n            unicodeNumberInBinary.slice(5, 12);\r\n        } else if (unicodeNumber < 65536) {\r\n          unicodeNumberInBinary = unicodeNumberInBinary.padStart(16, \"0\");\r\n          utf8Style =\r\n            \"1110\" +\r\n            unicodeNumberInBinary.slice(0, 4) +\r\n            \"10\" +\r\n            unicodeNumberInBinary.slice(4, 10) +\r\n            \"10\" +\r\n            unicodeNumberInBinary.slice(10, 16);\r\n        } else if (unicodeNumber <= 1114111) {\r\n          unicodeNumberInBinary = unicodeNumberInBinary.padStart(21, \"0\");\r\n          utf8Style =\r\n            \"11110\" +\r\n            unicodeNumberInBinary.slice(0, 3) +\r\n            \"10\" +\r\n            unicodeNumberInBinary.slice(3, 9) +\r\n            \"10\" +\r\n            unicodeNumberInBinary.slice(9, 15) +\r\n            \"10\" +\r\n            unicodeNumberInBinary.slice(15, 21);\r\n        } else {\r\n          throw new Error();\r\n        }\r\n        encodedMessage += utf8Style;\r\n      }\r\n      return encodedMessage;\r\n    } catch (error: any) {\r\n      throw new Error(\"Unexpected error while processing the message text.\");\r\n    }\r\n  };\r\n\r\n  const putMessageInImage = (\r\n    newImageData: ImageData,\r\n    encodedMessage: string,\r\n    imageWidth: number,\r\n    imageHeight: number,\r\n    oldImageData: ImageData\r\n  ): [ImageData, number, number] => {\r\n    let newPixels = newImageData.data;\r\n    let oldPixels = oldImageData.data;\r\n    let finalEncodedMessage = encodedMessage + config.messageAppendedAtEnd;\r\n    let msgLength = finalEncodedMessage.length;\r\n    let maxLength = imageWidth * imageHeight * 3 * 2;\r\n    if (msgLength > maxLength) {\r\n      throw new Error(\r\n        \"Image with more pixels needed for encoding current message.\"\r\n      );\r\n    }\r\n    let numPixelsToChange = Math.ceil(msgLength / (2 * 3));\r\n    let percentImageChange =\r\n      (numPixelsToChange / (imageWidth * imageHeight)) * 100;\r\n\r\n    let pixelIndex = 0;\r\n    for (let i = 0; i < finalEncodedMessage.length; i += 6) {\r\n      const rm = finalEncodedMessage.slice(i, i + 2);\r\n      const gm = finalEncodedMessage.slice(i + 2, i + 4);\r\n      const bm = finalEncodedMessage.slice(i + 4, i + 6);\r\n\r\n      let r =\r\n        parseInt(oldPixels[pixelIndex].toString(), 10)\r\n          .toString(2)\r\n          .padStart(8, \"0\")\r\n          .slice(0, 6) + rm;\r\n      let g =\r\n        gm !== \"\"\r\n          ? parseInt(oldPixels[pixelIndex + 1].toString(), 10)\r\n              .toString(2)\r\n              .padStart(8, \"0\")\r\n              .slice(0, 6) + gm\r\n          : oldPixels[pixelIndex + 1].toString();\r\n      let b =\r\n        bm !== \"\"\r\n          ? parseInt(oldPixels[pixelIndex + 2].toString(), 10)\r\n              .toString(2)\r\n              .padStart(8, \"0\")\r\n              .slice(0, 6) + bm\r\n          : oldPixels[pixelIndex + 2].toString();\r\n\r\n      let rNum = parseInt(r, 2);\r\n      let gNum = parseInt(g, 2);\r\n      let bNum = parseInt(b, 2);\r\n\r\n      newPixels[pixelIndex] = rNum;\r\n      newPixels[pixelIndex + 1] = gNum;\r\n      newPixels[pixelIndex + 2] = bNum;\r\n      newPixels[pixelIndex + 3] = oldPixels[pixelIndex + 3];\r\n\r\n      pixelIndex += 4; // Move to the next pixel (4 channels per pixel in RGBA)\r\n    }\r\n    for (; pixelIndex < oldPixels.length; pixelIndex++) {\r\n      newPixels[pixelIndex] = oldPixels[pixelIndex];\r\n    }\r\n    return [newImageData, numPixelsToChange, percentImageChange];\r\n  };\r\n\r\n  const handleFormSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      const image = new Image();\r\n      image.src = selectedImageState.selectedImageURL;\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = image.width;\r\n      canvas.height = image.height;\r\n      const ctx = canvas.getContext(\"2d\", { colorSpace: \"srgb\" });\r\n      if (ctx === null) {\r\n        throw Error(\"unexpected error.\");\r\n      }\r\n      ctx.drawImage(image, 0, 0);\r\n      let encodedMessage;\r\n      if (password) {\r\n        encodedMessage = convertMessageToBinary(\r\n          CryptoJS.AES.encrypt(message, password).toString()\r\n        );\r\n      } else {\r\n        encodedMessage = convertMessageToBinary(message);\r\n      }\r\n\r\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n      let newImageData = new ImageData(canvas.width, canvas.height);\r\n      let numPixelsToChange;\r\n      let percentImageChange;\r\n      [newImageData, numPixelsToChange, percentImageChange] = putMessageInImage(\r\n        newImageData,\r\n        encodedMessage,\r\n        image.width,\r\n        image.height,\r\n        imageData\r\n      );\r\n\r\n      ctx.putImageData(newImageData, 0, 0);\r\n      const newDataURL = canvas.toDataURL(\"image/png\");\r\n      await navigate(\"/encode_share/\", {\r\n        state: {\r\n          selectedImageName: selectedImageState.selectedImageName,\r\n          newDataBlob: dataURLToBlob(newDataURL),\r\n          numPixelsToChange,\r\n          percentImageChange,\r\n        },\r\n      });\r\n    } catch (error: any) {\r\n      changeSnackbarState({\r\n        isOpen: true,\r\n        message: error.message,\r\n        severity: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const navigateToStep2 = async () => {\r\n    await navigate(\"/step2/\", {\r\n      state: {\r\n        selectedImageState: {\r\n          selectedImage: selectedImageState.selectedImage,\r\n          selectedImageName: selectedImageState.selectedImageName,\r\n          selectedImageType: selectedImageState.selectedImageType,\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  // misc\r\n  let currentTheme = createTheme({\r\n    palette: {\r\n      mode: themeState,\r\n    },\r\n    typography: {\r\n      fontFamily: config.defaultFont,\r\n    },\r\n  });\r\n  return (\r\n    <ThemeProvider theme={currentTheme}>\r\n      <main\r\n        className=\"main\"\r\n        style={{\r\n          backgroundImage: `url(\"${selectedImageState.selectedImageURL}\")`,\r\n        }}\r\n      >\r\n        <Card className=\"inside-main\">\r\n          <Typography>\r\n            selected image:{\" \"}\r\n            <Typography\r\n              title={`${selectedImageState.selectedImageName}.${selectedImageState?.selectedImageType}`}\r\n              color=\"primary\"\r\n              variant=\"button\"\r\n            >\r\n              {selectedImageState.selectedImageName.length >\r\n              config.step2FileNameLength.max\r\n                ? `${\r\n                    selectedImageState.selectedImageName.slice(\r\n                      0,\r\n                      config.step2FileNameLength.visibleEnds\r\n                    ) +\r\n                    \"...\" +\r\n                    selectedImageState.selectedImageName.slice(\r\n                      -config.step2FileNameLength.visibleEnds\r\n                    )\r\n                  }.${selectedImageState.selectedImageType}`\r\n                : `${selectedImageState.selectedImageName}.${selectedImageState.selectedImageType}`}\r\n            </Typography>\r\n          </Typography>\r\n          <form className=\"form\" onSubmit={handleFormSubmit}>\r\n            <TextField\r\n              placeholder=\"enter text to hide in selected image\"\r\n              value={message}\r\n              onChange={(e) => changeMessage(e.target.value)}\r\n              required\r\n              rows={3}\r\n              multiline\r\n              autoFocus\r\n              label=\"message\"\r\n            />\r\n\r\n            <PasswordInput\r\n              value={password}\r\n              onChange={(e) => changePassword(e.target.value)}\r\n              uniqueIdForARIA=\"encode-password\"\r\n              variant=\"outlined\"\r\n              label=\"optional password\"\r\n              others={{}}\r\n            />\r\n\r\n            <Button type=\"submit\" size=\"large\" variant=\"contained\">\r\n              submit\r\n            </Button>\r\n          </form>\r\n          <Button\r\n            onClick={uploadPhoto}\r\n            variant=\"outlined\"\r\n            startIcon={<ImageIcon />}\r\n          >\r\n            change selected image\r\n          </Button>\r\n          <ThemeToggle\r\n            themeState={themeState}\r\n            customChangeThemeState={customChangeThemeState}\r\n          />\r\n          <Button\r\n            onClick={navigateToStep2}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            startIcon={<ArrowBackIcon />}\r\n          >\r\n            go back\r\n          </Button>\r\n        </Card>\r\n        <CustomSnackbar\r\n          snackbarState={snackbarState}\r\n          changeSnackbarState={changeSnackbarState}\r\n        />\r\n      </main>\r\n    </ThemeProvider>\r\n  );\r\n};\r\nexport default EncodePage;\r\n"],"names":["isBrowser","window","Head","React","props","selectedImageStateProps","obj","location","state","navigate","localStorageTheme","defaultThemeState","selectedImage","selectedImageState","selectedImageName","selectedImageType","selectedImageURL","URL","createObjectURL","localStorage","getItem","config","setItem","themeState","changeThemeState","useState","snackbarState","changeSnackbarState","isOpen","message","severity","changeSelectedImageState","changeMessage","password","changePassword","convertMessageToBinary","encodedMessage","utf8Style","i","length","unicodeNumber","charCodeAt","unicodeNumberInBinary","toString","padStart","slice","Error","error","currentTheme","createTheme","palette","mode","typography","fontFamily","defaultFont","ThemeProvider","theme","className","style","backgroundImage","Card","Typography","title","color","variant","step2FileNameLength","max","visibleEnds","onSubmit","async","e","preventDefault","image","Image","src","canvas","document","createElement","width","height","ctx","getContext","colorSpace","drawImage","CryptoJS","encrypt","imageData","getImageData","numPixelsToChange","percentImageChange","newImageData","ImageData","imageWidth","imageHeight","oldImageData","newPixels","data","oldPixels","finalEncodedMessage","messageAppendedAtEnd","msgLength","Math","ceil","pixelIndex","rm","gm","bm","r","parseInt","g","b","rNum","gNum","bNum","putMessageInImage","putImageData","newDataURL","toDataURL","newDataBlob","dataURLToBlob","TextField","placeholder","value","onChange","target","required","rows","multiline","autoFocus","label","PasswordInput","uniqueIdForARIA","others","Button","type","size","onClick","inputDOM","setAttribute","addEventListener","getSelectedImage","click","startIcon","ImageIcon","ThemeToggle","customChangeThemeState","newThemeState","ArrowBackIcon","CustomSnackbar"],"sourceRoot":""}