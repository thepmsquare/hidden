{"version":3,"file":"component---src-pages-index-tsx-0fb2811d6f2c9e57d987.js","mappings":"2QAkBA,MAAMA,EAA8B,oBAAXC,OAEZC,EAAe,IAAMC,EAAAA,cAAAA,QAAAA,KAAO,UA2GzC,UAzGiC,KAE/B,IAAIC,EAOAC,EALFD,EADEJ,EACkBC,OAAOK,aAAaC,QAAQ,SAE5B,KAEtBC,QAAQC,KAAK,8BAA+BL,GAElB,OAAtBA,EACFC,EAA0C,SAAtBD,EAA+B,OAAS,SAE5DC,EAAoBK,EAAAA,EAAOL,kBACvBL,GACFC,OAAOK,aAAaK,QAAQ,QAASD,EAAAA,EAAOL,oBAGhDG,QAAQC,KAAK,sBAAuBJ,GAGpC,MAAM,EAACO,EAAU,EAAEC,IAAoBC,EAAAA,EAAAA,UAAST,IAC1C,EAACU,EAAa,EAAEC,IACpBF,EAAAA,EAAAA,UAAkC,CAChCG,QAAQ,EACRC,QAAS,GACTC,SAAU,UAEdX,QAAQC,KAAK,eAAgBG,GAyC7B,IAAIQ,GAAeC,EAAAA,EAAAA,GAAY,CAC7BC,QAAS,CACPC,KAAMX,GAERY,WAAY,CACVC,WAAYf,EAAAA,EAAOgB,eAIvB,OADAlB,QAAQC,KAAK,iBAAkBkB,KAAKC,UAAUR,EAAaE,QAAQC,OAEjEpB,EAAAA,cAAC0B,EAAAA,EAAa,CAACC,MAAOV,GACpBjB,EAAAA,cAAC4B,EAAAA,EAAI,CAACC,UAAU,OAAOC,QAAM,GAC3B9B,EAAAA,cAAAA,MAAAA,CAAK6B,UAAU,eACb7B,EAAAA,cAAC+B,EAAAA,EAAM,CACLC,QA5CU,KAClB,IAAIC,EAAWC,SAASC,cAAc,SACtCF,EAASG,aAAa,OAAQ,QAC9BH,EAASG,aAAa,SAAU,mCAChCH,EAASI,iBAAiB,UAAWC,IACnCC,EAAAA,EAAAA,GACED,GACAE,MACEC,EACAC,EACAC,WAGMC,EAAAA,EAAAA,IAAS,UAAW,CACxBC,MAAO,CACLC,mBAAoB,CAClBL,eAAeM,EAAAA,EAAAA,GAAcN,GAC7BC,oBACAC,uBAGJ,GAEJ9B,KAGJoB,EAASe,OAAO,EAmBRC,QAAQ,YACRC,KAAK,QACLrB,UAAU,qBACVsB,UAAWnD,EAAAA,cAACoD,EAAAA,EAAS,OACtB,mBAGDpD,EAAAA,cAACqD,EAAAA,EAAW,CACV5C,WAAYA,EACZ6C,uBA7DsBC,IAC9B7C,EAAiB6C,GACb1D,GACFC,OAAOK,aAAaK,QAAQ,QAAS+C,EACvC,MA6DEvD,EAAAA,cAACwD,EAAAA,EAAc,CACb5C,cAAeA,EACfC,oBAAqBA,IAET,C","sources":["webpack://hidden/./src/pages/index.tsx"],"sourcesContent":["import React, { FC, useState } from \"react\";\r\nimport { navigate } from \"gatsby\";\r\nimport type { HeadFC, PageProps } from \"gatsby\";\r\nimport { Button, Card } from \"@mui/material\";\r\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\r\nimport config from \"../../config\";\r\nimport ThemeToggle from \"../components/ThemeToggle\";\r\nimport CustomSnackbar from \"../components/CustomSnackbar\";\r\nimport type CustomSnackbarStateType from \"../types/CustomSnackbarStateType\";\r\nimport dataURLToBlob from \"../utils/dataURLToBlob\";\r\nimport \"../stylesheets/index.css\";\r\nimport \"../stylesheets/common.css\";\r\nimport getSelectedImage from \"../utils/getSelectedImage\";\r\nimport \"@fontsource/roboto/300.css\";\r\nimport \"@fontsource/roboto/400.css\";\r\nimport \"@fontsource/roboto/500.css\";\r\nimport \"@fontsource/roboto/700.css\";\r\nimport ImageIcon from \"@mui/icons-material/Image\";\r\nconst isBrowser = typeof window !== \"undefined\";\r\n\r\nexport const Head: HeadFC = () => <title>hidden</title>;\r\n\r\nconst IndexPage: FC<PageProps> = () => {\r\n  // get stuff from local storage\r\n  let localStorageTheme;\r\n  if (isBrowser) {\r\n    localStorageTheme = window.localStorage.getItem(\"theme\");\r\n  } else {\r\n    localStorageTheme = null;\r\n  }\r\n  console.info(\"direct from local storage: \", localStorageTheme);\r\n  let defaultThemeState: \"dark\" | \"light\";\r\n  if (localStorageTheme !== null) {\r\n    defaultThemeState = localStorageTheme === \"dark\" ? \"dark\" : \"light\";\r\n  } else {\r\n    defaultThemeState = config.defaultThemeState;\r\n    if (isBrowser) {\r\n      window.localStorage.setItem(\"theme\", config.defaultThemeState);\r\n    }\r\n  }\r\n  console.info(\"defaultThemeState: \", defaultThemeState);\r\n\r\n  // state\r\n  const [themeState, changeThemeState] = useState(defaultThemeState);\r\n  const [snackbarState, changeSnackbarState] =\r\n    useState<CustomSnackbarStateType>({\r\n      isOpen: false,\r\n      message: \"\",\r\n      severity: \"error\",\r\n    });\r\n  console.info(\"themeState: \", themeState);\r\n\r\n  // functions\r\n\r\n  const customChangeThemeState = (newThemeState: \"dark\" | \"light\") => {\r\n    changeThemeState(newThemeState);\r\n    if (isBrowser) {\r\n      window.localStorage.setItem(\"theme\", newThemeState);\r\n    }\r\n  };\r\n\r\n  const uploadPhoto = () => {\r\n    let inputDOM = document.createElement(\"input\");\r\n    inputDOM.setAttribute(\"type\", \"file\");\r\n    inputDOM.setAttribute(\"accept\", \"image/png,image/jpeg,image/webp\");\r\n    inputDOM.addEventListener(\"change\", (e) =>\r\n      getSelectedImage(\r\n        e,\r\n        async (\r\n          selectedImage: string,\r\n          selectedImageName: string,\r\n          selectedImageType: string\r\n        ) => {\r\n          // TODO\r\n          await navigate(\"/step2/\", {\r\n            state: {\r\n              selectedImageState: {\r\n                selectedImage: dataURLToBlob(selectedImage),\r\n                selectedImageName,\r\n                selectedImageType,\r\n              },\r\n            },\r\n          });\r\n        },\r\n        changeSnackbarState\r\n      )\r\n    );\r\n    inputDOM.click();\r\n  };\r\n\r\n  // misc\r\n  let currentTheme = createTheme({\r\n    palette: {\r\n      mode: themeState,\r\n    },\r\n    typography: {\r\n      fontFamily: config.defaultFont,\r\n    },\r\n  });\r\n  console.info(\"currentTheme: \", JSON.stringify(currentTheme.palette.mode));\r\n  return (\r\n    <ThemeProvider theme={currentTheme}>\r\n      <Card className=\"main\" square>\r\n        <div className=\"inside-main\">\r\n          <Button\r\n            onClick={uploadPhoto}\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            className=\"index-start-button\"\r\n            startIcon={<ImageIcon />}\r\n          >\r\n            select an image\r\n          </Button>\r\n          <ThemeToggle\r\n            themeState={themeState}\r\n            customChangeThemeState={customChangeThemeState}\r\n          />\r\n        </div>\r\n      </Card>\r\n      <CustomSnackbar\r\n        snackbarState={snackbarState}\r\n        changeSnackbarState={changeSnackbarState}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n"],"names":["isBrowser","window","Head","React","localStorageTheme","defaultThemeState","localStorage","getItem","console","info","config","setItem","themeState","changeThemeState","useState","snackbarState","changeSnackbarState","isOpen","message","severity","currentTheme","createTheme","palette","mode","typography","fontFamily","defaultFont","JSON","stringify","ThemeProvider","theme","Card","className","square","Button","onClick","inputDOM","document","createElement","setAttribute","addEventListener","e","getSelectedImage","async","selectedImage","selectedImageName","selectedImageType","navigate","state","selectedImageState","dataURLToBlob","click","variant","size","startIcon","ImageIcon","ThemeToggle","customChangeThemeState","newThemeState","CustomSnackbar"],"sourceRoot":""}