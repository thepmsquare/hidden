{"version":3,"file":"component---src-pages-index-tsx-445fa3068c00d9b9fb51.js","mappings":"yGAGIA,EAAyB,EAAQ,MAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBF,EAAuB,EAAQ,OAChDG,EAAc,EAAQ,MACtBC,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,6HACD,SACJN,EAAQ,EAAUG,C,mLCIlB,MAAMI,EAA8B,oBAAXC,OAEZC,EAAe,IAAMC,EAAAA,cAAAA,QAAAA,KAAO,UAuGzC,UArGiC,KAE/B,IAAIC,EAMAC,EAJFD,EADEJ,EACkBC,OAAOK,aAAaC,QAAQ,SAE5B,KAGI,OAAtBH,EACFC,EAA0C,SAAtBD,EAA+B,OAAS,SAE5DC,EAAoBG,EAAAA,EAAOH,kBACvBL,GACFC,OAAOK,aAAaG,QAAQ,QAASD,EAAAA,EAAOH,oBAKhD,MAAM,EAACK,EAAU,EAAEC,IAAoBC,EAAAA,EAAAA,UAASP,IAC1C,EAACQ,EAAa,EAAEC,IACpBF,EAAAA,EAAAA,UAAkC,CAChCG,QAAQ,EACRC,QAAS,GACTC,SAAU,UAyCd,IAAIC,GAAeC,EAAAA,EAAAA,GAAY,CAC7BC,QAAS,CACPC,KAAMX,GAERY,WAAY,CACVC,WAAYf,EAAAA,EAAOgB,eAIvB,OACErB,EAAAA,cAACsB,EAAAA,EAAa,CAACC,MAAOR,GACpBf,EAAAA,cAACwB,EAAAA,EAAI,CAACC,UAAU,OAAOC,QAAM,GAC3B1B,EAAAA,cAAAA,MAAAA,CAAKyB,UAAU,eACbzB,EAAAA,cAAC2B,EAAAA,EAAM,CACLC,QA3CU,KAClB,IAAIC,EAAWC,SAASC,cAAc,SACtCF,EAASG,aAAa,OAAQ,QAC9BH,EAASG,aAAa,SAAU,mCAChCH,EAASI,iBAAiB,UAAWC,IACnCC,EAAAA,EAAAA,GACED,GACAE,MACEC,EACAC,EACAC,WAEMC,EAAAA,EAAAA,UAAS,UAAW,CACxBC,MAAO,CACLC,mBAAoB,CAClBL,gBACAC,oBACAC,uBAGJ,GAEJ5B,KAGJkB,EAASc,OAAO,EAmBRC,QAAQ,YACRC,KAAK,QACLpB,UAAU,qBACVqB,UAAW9C,EAAAA,cAAC+C,EAAAA,EAAS,OACtB,mBAGD/C,EAAAA,cAACgD,EAAAA,EAAW,CACVzC,WAAYA,EACZ0C,uBA5DsBC,IAC9B1C,EAAiB0C,GACbrD,GACFC,OAAOK,aAAaG,QAAQ,QAAS4C,EACvC,MA4DElD,EAAAA,cAACmD,EAAAA,EAAc,CACbzC,cAAeA,EACfC,oBAAqBA,IAET,C,qBCvDpB,IA1DyB,CACvBuB,EACAkB,EAKAzC,KAEA,GACEuB,EAAEmB,QACF,UAAWnB,EAAEmB,QAb0D,IAc5CnB,EAAEmB,OAAOC,MAdwBC,OAe5D,CACA,MAAMC,EAActB,EAAEmB,OAAOC,MAAM,GAAGG,KAAKC,YAAY,KACjDC,EAAWzB,EAAEmB,OAAOC,MAAM,GAAGG,KAAKG,MAAM,EAAGJ,GAC3CK,EAAW3B,EAAEmB,OAAOC,MAAM,GAAGG,KAChCG,MAAMJ,EAAc,GACpBM,cACH,GACe,QAAbD,GACa,QAAbA,GACa,SAAbA,GACa,SAAbA,GACa,UAAbA,GACa,QAAbA,GACa,SAAbA,EACA,CACA,MAAME,EAAU,IAAIC,WACpBD,EAAQE,cAAc/B,EAAEmB,OAAOC,MAAM,IACrCS,EAAQG,UAAaC,IACfA,EAAMd,QAAyC,iBAAxBc,EAAMd,OAAOe,OACtChB,EAASe,EAAMd,OAAOe,OAAQT,EAAUE,GAExClD,EAAoB,CAClBC,QAAQ,EACRC,QAAS,4CACTC,SAAU,SAEd,CAEJ,MACEH,EAAoB,CAClBC,QAAQ,EACRC,QACE,4FACFC,SAAU,SAGhB,MACEH,EAAoB,CAClBC,QAAQ,EACRC,QACE,4FACFC,SAAU,SAEd,C","sources":["webpack://hidden/./node_modules/@mui/icons-material/Image.js","webpack://hidden/./src/pages/index.tsx","webpack://hidden/./src/utils/getSelectedImage.ts"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"\n}), 'Image');\nexports.default = _default;","import React, { FC, useState } from \"react\";\r\nimport { navigate } from \"gatsby\";\r\nimport type { HeadFC, PageProps } from \"gatsby\";\r\nimport { Button, Card } from \"@mui/material\";\r\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\r\nimport config from \"../../config\";\r\nimport ThemeToggle from \"../components/ThemeToggle\";\r\nimport CustomSnackbar from \"../components/CustomSnackbar\";\r\nimport type CustomSnackbarStateType from \"../types/CustomSnackbarStateType\";\r\nimport \"../stylesheets/index.css\";\r\nimport \"../stylesheets/common.css\";\r\nimport getSelectedImage from \"../utils/getSelectedImage\";\r\nimport \"@fontsource/roboto/300.css\";\r\nimport \"@fontsource/roboto/400.css\";\r\nimport \"@fontsource/roboto/500.css\";\r\nimport \"@fontsource/roboto/700.css\";\r\nimport ImageIcon from \"@mui/icons-material/Image\";\r\nconst isBrowser = typeof window !== \"undefined\";\r\n\r\nexport const Head: HeadFC = () => <title>hidden</title>;\r\n\r\nconst IndexPage: FC<PageProps> = () => {\r\n  // get stuff from local storage\r\n  let localStorageTheme;\r\n  if (isBrowser) {\r\n    localStorageTheme = window.localStorage.getItem(\"theme\");\r\n  } else {\r\n    localStorageTheme = null;\r\n  }\r\n  let defaultThemeState: \"dark\" | \"light\";\r\n  if (localStorageTheme !== null) {\r\n    defaultThemeState = localStorageTheme === \"dark\" ? \"dark\" : \"light\";\r\n  } else {\r\n    defaultThemeState = config.defaultThemeState;\r\n    if (isBrowser) {\r\n      window.localStorage.setItem(\"theme\", config.defaultThemeState);\r\n    }\r\n  }\r\n\r\n  // state\r\n  const [themeState, changeThemeState] = useState(defaultThemeState);\r\n  const [snackbarState, changeSnackbarState] =\r\n    useState<CustomSnackbarStateType>({\r\n      isOpen: false,\r\n      message: \"\",\r\n      severity: \"error\",\r\n    });\r\n\r\n  // functions\r\n\r\n  const customChangeThemeState = (newThemeState: \"dark\" | \"light\") => {\r\n    changeThemeState(newThemeState);\r\n    if (isBrowser) {\r\n      window.localStorage.setItem(\"theme\", newThemeState);\r\n    }\r\n  };\r\n\r\n  const uploadPhoto = () => {\r\n    let inputDOM = document.createElement(\"input\");\r\n    inputDOM.setAttribute(\"type\", \"file\");\r\n    inputDOM.setAttribute(\"accept\", \"image/png,image/jpeg,image/webp\");\r\n    inputDOM.addEventListener(\"change\", (e) =>\r\n      getSelectedImage(\r\n        e,\r\n        async (\r\n          selectedImage: string,\r\n          selectedImageName: string,\r\n          selectedImageType: string\r\n        ) => {\r\n          await navigate(\"/step2/\", {\r\n            state: {\r\n              selectedImageState: {\r\n                selectedImage,\r\n                selectedImageName,\r\n                selectedImageType,\r\n              },\r\n            },\r\n          });\r\n        },\r\n        changeSnackbarState\r\n      )\r\n    );\r\n    inputDOM.click();\r\n  };\r\n\r\n  // misc\r\n  let currentTheme = createTheme({\r\n    palette: {\r\n      mode: themeState,\r\n    },\r\n    typography: {\r\n      fontFamily: config.defaultFont,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={currentTheme}>\r\n      <Card className=\"main\" square>\r\n        <div className=\"inside-main\">\r\n          <Button\r\n            onClick={uploadPhoto}\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            className=\"index-start-button\"\r\n            startIcon={<ImageIcon />}\r\n          >\r\n            select an image\r\n          </Button>\r\n          <ThemeToggle\r\n            themeState={themeState}\r\n            customChangeThemeState={customChangeThemeState}\r\n          />\r\n        </div>\r\n      </Card>\r\n      <CustomSnackbar\r\n        snackbarState={snackbarState}\r\n        changeSnackbarState={changeSnackbarState}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n","import { Dispatch } from \"react\";\r\nimport type CustomSnackbarStateType from \"../types/CustomSnackbarStateType\";\r\n\r\nconst customTypeCheckForFileList = (x: any): x is FileList => x.length === 1;\r\n\r\nconst getSelectedImage = (\r\n  e: Event,\r\n  callback: (\r\n    selectedImage: string,\r\n    selectedImageName: string,\r\n    selectedImageType: string\r\n  ) => void,\r\n  changeSnackbarState: Dispatch<CustomSnackbarStateType>\r\n) => {\r\n  if (\r\n    e.target &&\r\n    \"files\" in e.target &&\r\n    customTypeCheckForFileList(e.target.files)\r\n  ) {\r\n    const indexOfPath = e.target.files[0].name.lastIndexOf(\".\");\r\n    const filename = e.target.files[0].name.slice(0, indexOfPath);\r\n    const filetype = e.target.files[0].name\r\n      .slice(indexOfPath + 1)\r\n      .toLowerCase();\r\n    if (\r\n      filetype === \"png\" ||\r\n      filetype === \"jpg\" ||\r\n      filetype === \"jpeg\" ||\r\n      filetype === \"jfif\" ||\r\n      filetype === \"pjpeg\" ||\r\n      filetype === \"pjp\" ||\r\n      filetype === \"webp\"\r\n    ) {\r\n      const fReader = new FileReader();\r\n      fReader.readAsDataURL(e.target.files[0]);\r\n      fReader.onloadend = (event) => {\r\n        if (event.target && typeof event.target.result === \"string\") {\r\n          callback(event.target.result, filename, filetype);\r\n        } else {\r\n          changeSnackbarState({\r\n            isOpen: true,\r\n            message: \"unable to select image, please try again.\",\r\n            severity: \"error\",\r\n          });\r\n        }\r\n      };\r\n    } else {\r\n      changeSnackbarState({\r\n        isOpen: true,\r\n        message:\r\n          \"unsupported image format. currently supported formats: image/jpeg, image/png, image/webp.\",\r\n        severity: \"error\",\r\n      });\r\n    }\r\n  } else {\r\n    changeSnackbarState({\r\n      isOpen: true,\r\n      message:\r\n        \"unsupported image format. currently supported formats: image/jpeg, image/png, image/webp.\",\r\n      severity: \"error\",\r\n    });\r\n  }\r\n};\r\nexport default getSelectedImage;\r\n"],"names":["_interopRequireDefault","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","isBrowser","window","Head","React","localStorageTheme","defaultThemeState","localStorage","getItem","config","setItem","themeState","changeThemeState","useState","snackbarState","changeSnackbarState","isOpen","message","severity","currentTheme","createTheme","palette","mode","typography","fontFamily","defaultFont","ThemeProvider","theme","Card","className","square","Button","onClick","inputDOM","document","createElement","setAttribute","addEventListener","e","getSelectedImage","async","selectedImage","selectedImageName","selectedImageType","navigate","state","selectedImageState","click","variant","size","startIcon","ImageIcon","ThemeToggle","customChangeThemeState","newThemeState","CustomSnackbar","callback","target","files","length","indexOfPath","name","lastIndexOf","filename","slice","filetype","toLowerCase","fReader","FileReader","readAsDataURL","onloadend","event","result"],"sourceRoot":""}